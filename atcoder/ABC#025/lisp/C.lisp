(defun calc-score (f b c)
  (let ((score 0))
    (dotimes (i 2)
      (dotimes (j 3)
        (if (not (eq (evenp (aref f i j)) (evenp (aref f (1+ i) j))))
            (incf score (aref b i j)))
        (if (not (eq (evenp (aref f j i)) (evenp (aref f j (1+ i)))))
            (incf score (aref c j i)))))
    score))

(defun solve (f b c sum count)
  (if (= count 9) (calc-score f b c)
      (let ((res (- (expt 10 9))))
        (dotimes (i 3)
          (dotimes (j 3)
            (cond ((zerop (aref f i j))
                   (setf (aref f i j) (1+ count))
                   (setf res (max res (- sum (solve f b c sum (1+ count)))))
                   (setf (aref f i j) 0)))))
        res)))

(defun main ()
  (let ((f (make-array `(3 3) :initial-contents `((0 0 0) (0 0 0) (0 0 0))))
        (b (make-array `(2 3) :initial-contents (loop repeat 2 collect `(,(read),(read),(read)))))
        (c (make-array `(3 2) :initial-contents (loop repeat 3 collect `(,(read),(read))))))
    (let ((sum (loop for i from 0 to 1
                     sum (loop for j from 0 to 2
                               sum (+ (aref b i j) (aref c j i))))))
      (let ((chokudai (solve f b c sum 0)))
        (format t "~a~%~a~%" chokudai (- sum chokudai))))))
(main)
